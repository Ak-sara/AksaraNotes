package com.aksara.notes.ui.settings

import android.content.Intent
import android.content.pm.PackageManager
import android.net.Uri
import android.os.Bundle
import android.widget.Toast
import androidx.appcompat.app.AlertDialog
import androidx.appcompat.app.AppCompatActivity
import com.aksara.notes.databinding.ActivityAboutBinding

class AboutActivity : AppCompatActivity() {

    private lateinit var binding: ActivityAboutBinding

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityAboutBinding.inflate(layoutInflater)
        setContentView(binding.root)

        setupToolbar()
        setupViews()
        setupClickListeners()
    }

    private fun setupToolbar() {
        setSupportActionBar(binding.toolbar)
        supportActionBar?.setDisplayHomeAsUpEnabled(true)
        supportActionBar?.title = "About"
    }

    private fun setupViews() {
        // Set app version using PackageManager
        try {
            val packageInfo = packageManager.getPackageInfo(packageName, 0)
            val versionName = packageInfo.versionName
            val versionCode = if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.P) {
                packageInfo.longVersionCode
            } else {
                @Suppress("DEPRECATION")
                packageInfo.versionCode.toLong()
            }
            binding.tvVersion.text = "Version $versionName ($versionCode)"
        } catch (e: PackageManager.NameNotFoundException) {
            binding.tvVersion.text = "Version 1.0.0"
        }

        // Set build info
        binding.tvBuildInfo.text = "by Ak'sara"
    }

    private fun setupClickListeners() {
        // Rate App
        binding.cardRateApp.setOnClickListener {
            rateApp()
        }

        // Share App
        binding.cardShareApp.setOnClickListener {
            shareApp()
        }

        // Privacy Policy
        binding.cardPrivacyPolicy.setOnClickListener {
            showPrivacyPolicy()
        }

        // Terms of Service
        binding.cardTermsOfService.setOnClickListener {
            showTermsOfService()
        }

        // GitHub Repository
        binding.cardGithubRepo.setOnClickListener {
            openGitHubRepo()
        }

        // What's New
        binding.cardWhatsNew.setOnClickListener {
            showWhatsNew()
        }
        binding.cardGettingStarted.setOnClickListener {
            showGettingStartedGuide()
        }

        // Notes Tutorial
        binding.cardNotesTutorial.setOnClickListener {
            showNotesTutorial()
        }

        // Database Tutorial
        binding.cardDatabaseTutorial.setOnClickListener {
            showDatabaseTutorial()
        }

        // Calendar Tutorial
        binding.cardCalendarTutorial.setOnClickListener {
            showCalendarTutorial()
        }

        // Security Guide
        binding.cardSecurityGuide.setOnClickListener {
            showSecurityGuide()
        }

        // FAQ
        binding.cardFaq.setOnClickListener {
            showFAQ()
        }

        // Report Bug
        binding.cardReportBug.setOnClickListener {
            reportBug()
        }

        // Feature Request
        binding.cardFeatureRequest.setOnClickListener {
            requestFeature()
        }

        // Tips & Tricks
        binding.cardTipsTricks.setOnClickListener {
            showTipsAndTricks()
        }

        // Troubleshooting
        binding.cardTroubleshooting.setOnClickListener {
            showTroubleshooting()
        }
    }

    private fun rateApp() {
        try {
            val intent = Intent(Intent.ACTION_VIEW).apply {
                data = Uri.parse("market://details?id=$packageName")
                setPackage("com.android.vending")
            }
            startActivity(intent)
        } catch (e: Exception) {
            // If Play Store is not available, open in browser
            try {
                val intent = Intent(Intent.ACTION_VIEW).apply {
                    data = Uri.parse("https://play.google.com/store/apps/details?id=$packageName")
                }
                startActivity(intent)
            } catch (ex: Exception) {
                showToast("Unable to open Play Store")
            }
        }
    }

    private fun shareApp() {
        val shareText = buildString {
            appendLine("üöÄ Check out Aksara Notes!")
            appendLine()
            appendLine("üìù Secure Notes with PIN protection")
            appendLine("üóÑÔ∏è Dynamic Database builder")
            appendLine("üìÖ Smart Calendar integration")
            appendLine("üîí Military-grade encryption")
            appendLine()
            appendLine("Download now:")
            appendLine("https://play.google.com/store/apps/details?id=$packageName")
        }

        val intent = Intent(Intent.ACTION_SEND).apply {
            type = "text/plain"
            putExtra(Intent.EXTRA_TEXT, shareText)
            putExtra(Intent.EXTRA_SUBJECT, "Aksara Notes - Secure Note Taking App")
        }

        try {
            startActivity(Intent.createChooser(intent, "Share Aksara Notes"))
        } catch (e: Exception) {
            showToast("Unable to share app")
        }
    }

    private fun showPrivacyPolicy() {
        val intent = Intent(Intent.ACTION_VIEW).apply {
            data = Uri.parse("https://your-privacy-policy-url.com")
        }

        try {
            startActivity(intent)
        } catch (e: Exception) {
            showToast("Privacy policy will be available soon")
        }
    }

    private fun showTermsOfService() {
        val intent = Intent(Intent.ACTION_VIEW).apply {
            data = Uri.parse("https://your-terms-url.com")
        }

        try {
            startActivity(intent)
        } catch (e: Exception) {
            showToast("Terms of service will be available soon")
        }
    }

    private fun openGitHubRepo() {
        val intent = Intent(Intent.ACTION_VIEW).apply {
            data = Uri.parse("https://github.com/Ak-sara/AksaraNotes")
        }
        try {
            startActivity(intent)
        } catch (e: Exception) {
            showToast("GitHub repository will be available soon")
        }
    }

    private fun showWhatsNew() {
        AlertDialog.Builder(this)
            .setTitle("‚ú® What's New in This Version")
            .setMessage(buildString {
                appendLine("üéâ Version 1.0.0 - Initial Release")
                appendLine()
                appendLine("üîí Security Features:")
                appendLine("‚Ä¢ Master password protection")
                appendLine("‚Ä¢ Biometric authentication")
                appendLine("‚Ä¢ Auto-lock functionality")
                appendLine("‚Ä¢ PIN-protected notes")
                appendLine()
                appendLine("üìù Note Taking:")
                appendLine("‚Ä¢ Rich text editing")
                appendLine("‚Ä¢ Search and favorites")
                appendLine("‚Ä¢ Secure sharing")
                appendLine()
                appendLine("üóÑÔ∏è Dynamic Database:")
                appendLine("‚Ä¢ Custom table builder")
                appendLine("‚Ä¢ Multiple field types")
                appendLine("‚Ä¢ Template system")
                appendLine()
                appendLine("üìÖ Smart Calendar:")
                appendLine("‚Ä¢ Event management")
                appendLine("‚Ä¢ Date field integration")
                appendLine("‚Ä¢ Monthly/daily views")
            })
            .setPositiveButton("Awesome!", null)
            .show()
    }
    private fun showGettingStartedGuide() {
        AlertDialog.Builder(this)
            .setTitle("üöÄ Getting Started with Aksara Notes")
            .setMessage(buildString {
                appendLine("Welcome to Aksara Notes! Here's how to get started:")
                appendLine()
                appendLine("1Ô∏è‚É£ Set Up Security")
                appendLine("‚Ä¢ Create a master password")
                appendLine("‚Ä¢ Enable biometric authentication (optional)")
                appendLine("‚Ä¢ Configure auto-lock settings")
                appendLine()
                appendLine("2Ô∏è‚É£ Create Your First Note")
                appendLine("‚Ä¢ Tap the '+' button in Notes tab")
                appendLine("‚Ä¢ Add title and content")
                appendLine("‚Ä¢ Use PIN protection for sensitive notes")
                appendLine()
                appendLine("3Ô∏è‚É£ Build Custom Databases")
                appendLine("‚Ä¢ Go to Database tab")
                appendLine("‚Ä¢ Tap '+' to create a custom table")
                appendLine("‚Ä¢ Choose from templates or create from scratch")
                appendLine()
                appendLine("4Ô∏è‚É£ Manage Your Calendar")
                appendLine("‚Ä¢ Add events in Calendar tab")
                appendLine("‚Ä¢ Database items with dates appear automatically")
                appendLine()
                appendLine("üéØ Pro Tip: Use the navigation drawer to access settings and more features!")
            })
            .setPositiveButton("Got it!", null)
            .show()
    }

    private fun showNotesTutorial() {
        AlertDialog.Builder(this)
            .setTitle("üìù Notes Tutorial")
            .setMessage(buildString {
                appendLine("Master the Notes feature:")
                appendLine()
                appendLine("üìÑ Creating Notes:")
                appendLine("‚Ä¢ Tap '+' to create a new note")
                appendLine("‚Ä¢ Add title and rich content")
                appendLine("‚Ä¢ Use formatting options")
                appendLine()
                appendLine("üîí Security Features:")
                appendLine("‚Ä¢ Toggle PIN protection for sensitive notes")
                appendLine("‚Ä¢ PIN-protected notes show a lock icon")
                appendLine("‚Ä¢ Require authentication to view/edit")
                appendLine()
                appendLine("‚≠ê Organization:")
                appendLine("‚Ä¢ Mark important notes as favorites")
                appendLine("‚Ä¢ Use search to find notes quickly")
                appendLine("‚Ä¢ Sort by date, title, or favorites")
                appendLine()
                appendLine("üì§ Sharing:")
                appendLine("‚Ä¢ Share notes as text via any app")
                appendLine("‚Ä¢ PIN-protected notes require unlock first")
                appendLine()
                appendLine("‚úèÔ∏è Editing:")
                appendLine("‚Ä¢ Tap any note to view/edit")
                appendLine("‚Ä¢ Changes are saved automatically")
                appendLine("‚Ä¢ Delete with the trash icon")
            })
            .setPositiveButton("Clear!", null)
            .show()
    }

    private fun showDatabaseTutorial() {
        AlertDialog.Builder(this)
            .setTitle("üóÑÔ∏è Database Tutorial")
            .setMessage(buildString {
                appendLine("Create powerful custom databases:")
                appendLine()
                appendLine("üèóÔ∏è Building Tables:")
                appendLine("‚Ä¢ Tap '+' to create a new table")
                appendLine("‚Ä¢ Choose from pre-built templates")
                appendLine("‚Ä¢ Or build completely custom tables")
                appendLine()
                appendLine("üìã Field Types:")
                appendLine("‚Ä¢ Text - For names, descriptions")
                appendLine("‚Ä¢ Number - For quantities, amounts")
                appendLine("‚Ä¢ Currency - For money values")
                appendLine("‚Ä¢ Date - Auto-integrates with calendar")
                appendLine("‚Ä¢ Boolean - For yes/no questions")
                appendLine("‚Ä¢ Select - For dropdown choices")
                appendLine("‚Ä¢ Rating - For 1-5 star ratings")
                appendLine()
                appendLine("üìä Managing Data:")
                appendLine("‚Ä¢ Tap any table to view items")
                appendLine("‚Ä¢ Add new items with '+' button")
                appendLine("‚Ä¢ Edit items by tapping them")
                appendLine("‚Ä¢ Required fields are marked with *")
                appendLine()
                appendLine("üìÖ Calendar Integration:")
                appendLine("‚Ä¢ Tables with date fields link to calendar")
                appendLine("‚Ä¢ Events appear automatically")
                appendLine("‚Ä¢ Perfect for subscriptions, birthdays, etc.")
            })
            .setPositiveButton("Awesome!", null)
            .show()
    }

    private fun showCalendarTutorial() {
        AlertDialog.Builder(this)
            .setTitle("üìÖ Calendar Tutorial")
            .setMessage(buildString {
                appendLine("Stay organized with the smart calendar:")
                appendLine()
                appendLine("üìç Viewing Events:")
                appendLine("‚Ä¢ Monthly view shows all events")
                appendLine("‚Ä¢ Tap any date to see daily events")
                appendLine("‚Ä¢ Events from database tables appear automatically")
                appendLine()
                appendLine("‚ûï Adding Events:")
                appendLine("‚Ä¢ Tap '+' to create manual events")
                appendLine("‚Ä¢ Set title, date, and time")
                appendLine("‚Ä¢ Choose event colors")
                appendLine()
                appendLine("üîó Database Integration:")
                appendLine("‚Ä¢ Any table with date fields creates events")
                appendLine("‚Ä¢ Subscription renewal dates")
                appendLine("‚Ä¢ Birthday reminders")
                appendLine("‚Ä¢ Appointment tracking")
                appendLine()
                appendLine("üé® Customization:")
                appendLine("‚Ä¢ Different colors for different event types")
                appendLine("‚Ä¢ Clear visual indicators")
                appendLine("‚Ä¢ Easy date navigation")
                appendLine()
                appendLine("üí° Smart Features:")
                appendLine("‚Ä¢ Today's date is highlighted")
                appendLine("‚Ä¢ Quick access to today's events")
                appendLine("‚Ä¢ Seamless month navigation")
            })
            .setPositiveButton("Perfect!", null)
            .show()
    }

    private fun showSecurityGuide() {
        AlertDialog.Builder(this)
            .setTitle("üîê Security Guide")
            .setMessage(buildString {
                appendLine("Keep your data secure:")
                appendLine()
                appendLine("üîë Master Password:")
                appendLine("‚Ä¢ Required to access the app")
                appendLine("‚Ä¢ Cannot be recovered if forgotten")
                appendLine("‚Ä¢ Used to encrypt all data")
                appendLine("‚Ä¢ Choose a strong, memorable password")
                appendLine()
                appendLine("üëÜ Biometric Authentication:")
                appendLine("‚Ä¢ Quick access with fingerprint/face")
                appendLine("‚Ä¢ Enable in Security Settings")
                appendLine("‚Ä¢ Falls back to master password")
                appendLine()
                appendLine("üîí Auto-Lock:")
                appendLine("‚Ä¢ Automatically locks app when inactive")
                appendLine("‚Ä¢ Configurable timeout periods")
                appendLine("‚Ä¢ Immediate, 1min, 5min, 15min, 1hour")
                appendLine()
                appendLine("üìå PIN Protection:")
                appendLine("‚Ä¢ Additional security for sensitive notes")
                appendLine("‚Ä¢ Uses same authentication method")
                appendLine("‚Ä¢ Protects individual notes")
                appendLine()
                appendLine("üõ°Ô∏è Data Encryption:")
                appendLine("‚Ä¢ All data encrypted at rest")
                appendLine("‚Ä¢ Industry-standard encryption")
                appendLine("‚Ä¢ Data never leaves your device unencrypted")
            })
            .setPositiveButton("Secure!", null)
            .show()
    }

    private fun showFAQ() {
        AlertDialog.Builder(this)
            .setTitle("‚ùì Frequently Asked Questions")
            .setMessage(buildString {
                appendLine("Q: I forgot my master password. What do I do?")
                appendLine("A: Unfortunately, master passwords cannot be recovered. You'll need to reset the app, which will erase all data. This is by design for security.")
                appendLine()
                appendLine("Q: Can I sync data across devices?")
                appendLine("A: Currently, data is stored locally for security. Cloud sync is planned for future updates with end-to-end encryption.")
                appendLine()
                appendLine("Q: How do I backup my data?")
                appendLine("A: The backup feature is coming soon! You'll be able to create encrypted backups to your device storage.")
                appendLine()
                appendLine("Q: Why do I need to authenticate so often?")
                appendLine("A: This is for security. You can adjust auto-lock settings in Security Settings to reduce frequency.")
                appendLine()
                appendLine("Q: Can I import data from other apps?")
                appendLine("A: The database builder allows creating tables for any data structure. Manual import tools are planned for future updates.")
                appendLine()
                appendLine("Q: Is my biometric data stored in the app?")
                appendLine("A: No! Biometric authentication uses your device's secure enclave. No biometric data is stored in Aksara Notes.")
                appendLine()
                appendLine("Q: How do I create complex database relationships?")
                appendLine("A: Currently, tables are independent. Relationship features are planned for future updates.")
            })
            .setPositiveButton("Thanks!", null)
            .show()
    }

    private fun showTipsAndTricks() {
        AlertDialog.Builder(this)
            .setTitle("üí° Tips & Tricks")
            .setMessage(buildString {
                appendLine("Get the most out of Aksara Notes:")
                appendLine()
                appendLine("üöÄ Productivity Tips:")
                appendLine("‚Ä¢ Use templates to quickly create common tables")
                appendLine("‚Ä¢ Pin frequently accessed notes as favorites")
                appendLine("‚Ä¢ Set up subscription tracking with the template")
                appendLine("‚Ä¢ Create a birthday database for reminders")
                appendLine()
                appendLine("üîç Search Like a Pro:")
                appendLine("‚Ä¢ Search works across all note content")
                appendLine("‚Ä¢ Use keywords from titles and content")
                appendLine("‚Ä¢ Favorites appear at the top")
                appendLine()
                appendLine("üóÇÔ∏è Organization Strategies:")
                appendLine("‚Ä¢ Use consistent naming conventions")
                appendLine("‚Ä¢ Create separate tables for different data types")
                appendLine("‚Ä¢ Use the rating field for priorities")
                appendLine("‚Ä¢ Date fields automatically create calendar events")
                appendLine()
                appendLine("üîí Security Best Practices:")
                appendLine("‚Ä¢ Use PIN protection for sensitive notes only")
                appendLine("‚Ä¢ Enable biometric auth for quick access")
                appendLine("‚Ä¢ Set appropriate auto-lock timeouts")
                appendLine("‚Ä¢ Regularly review security settings")
                appendLine()
                appendLine("‚ö° Quick Actions:")
                appendLine("‚Ä¢ Swipe navigation drawer for quick settings")
                appendLine("‚Ä¢ Use bottom tabs for main features")
                appendLine("‚Ä¢ Long-press for additional options (coming soon)")
            })
            .setPositiveButton("Great tips!", null)
            .show()
    }

    private fun showTroubleshooting() {
        AlertDialog.Builder(this)
            .setTitle("üîß Troubleshooting")
            .setMessage(buildString {
                appendLine("Common issues and solutions:")
                appendLine()
                appendLine("üîê Authentication Issues:")
                appendLine("‚Ä¢ Biometric not working? Check device settings")
                appendLine("‚Ä¢ App keeps asking for auth? Check auto-lock settings")
                appendLine("‚Ä¢ Can't remember password? Unfortunately, reset is required")
                appendLine()
                appendLine("üì± App Performance:")
                appendLine("‚Ä¢ App slow? Restart the app")
                appendLine("‚Ä¢ Crashes? Clear app cache in device settings")
                appendLine("‚Ä¢ Storage full? Archive old notes or tables")
                appendLine()
                appendLine("üóÑÔ∏è Database Problems:")
                appendLine("‚Ä¢ Can't create table? Ensure valid field names")
                appendLine("‚Ä¢ Form validation errors? Check required fields (marked with *)")
                appendLine("‚Ä¢ Date picker not working? Try tapping the date field directly")
                appendLine()
                appendLine("üìÖ Calendar Issues:")
                appendLine("‚Ä¢ Events not showing? Check if table has date fields")
                appendLine("‚Ä¢ Wrong dates? Verify date format in table items")
                appendLine("‚Ä¢ Can't navigate? Use month arrows or tap dates")
                appendLine()
                appendLine("üíæ Data Concerns:")
                appendLine("‚Ä¢ Data missing? Check if you're in the right tab")
                appendLine("‚Ä¢ Changes not saving? Ensure you tap 'Save' button")
                appendLine("‚Ä¢ Want to export? Backup feature coming soon")
                appendLine()
                appendLine("Still having issues? Contact support!")
            })
            .setPositiveButton("Helpful!", null)
            .show()
    }

    private fun reportBug() {
        val intent = Intent(Intent.ACTION_SENDTO).apply {
            data = Uri.parse("mailto:bugs@aksaranotes.com")
            putExtra(Intent.EXTRA_SUBJECT, "Aksara Notes - Bug Report")
            putExtra(Intent.EXTRA_TEXT, buildString {
                appendLine("Bug Report for Aksara Notes")
                appendLine()
                appendLine("Device Info:")
                appendLine("- Device: ${android.os.Build.MANUFACTURER} ${android.os.Build.MODEL}")
                appendLine("- Android: ${android.os.Build.VERSION.RELEASE}")
                appendLine("- App Version: 1.0.0")
                appendLine()
                appendLine("Bug Description:")
                appendLine()
                appendLine("Steps to Reproduce:")
                appendLine("1. ")
                appendLine("2. ")
                appendLine("3. ")
                appendLine()
                appendLine("Expected Behavior:")
                appendLine()
                appendLine("Actual Behavior:")
                appendLine()
                appendLine("Screenshots (if applicable):")
                appendLine("Please attach screenshots if they help explain the issue.")
            })
        }

        try {
            startActivity(intent)
        } catch (e: Exception) {
            showToast("No email app found")
        }
    }

    private fun requestFeature() {
        val intent = Intent(Intent.ACTION_SENDTO).apply {
            data = Uri.parse("mailto:features@aksaranotes.com")
            putExtra(Intent.EXTRA_SUBJECT, "Aksara Notes - Feature Request")
            putExtra(Intent.EXTRA_TEXT, buildString {
                appendLine("Feature Request for Aksara Notes")
                appendLine()
                appendLine("Requested Feature:")
                appendLine()
                appendLine("Why is this feature important?")
                appendLine()
                appendLine("How would you use this feature?")
                appendLine()
                appendLine("Additional Details:")
                appendLine()
            })
        }

        try {
            startActivity(intent)
        } catch (e: Exception) {
            showToast("No email app found")
        }
    }
    private fun showToast(message: String) {
        Toast.makeText(this, message, Toast.LENGTH_SHORT).show()
    }

    override fun onSupportNavigateUp(): Boolean {
        finish()
        return true
    }
}